# YOLOv5 🚀 by Ultralytics, GPL-3.0 license
# ================================
# 一个配置文件，网络结构声明
# YOLOv5针对不同大小（n, s, m, l, x）的网络整体架构都是一样的，
# 五个模型文件中，anchors,backbone和head都是一样的
# 区别在于，子模块中采用不同的深度和宽度，对应yaml文件中的depth_multiple和width_multiple参数。决定了模型的复杂度
# 是深度因子和宽度因子不同
# 深度因子是C3中bottleneck 块的多少
# 宽度因子是卷积层的通道数
# ================================
# 1、参数配置 Parameters
nc: 80  # number of classes 数据集中的类别数
depth_multiple: 0.33  # model depth multiple 模型层数因子(用来调整网络的深度)
width_multiple: 0.50  # layer channel multiple 模型通道数因子(用来调整网络的宽度)

# 2、先验框配置
anchors:  # 9个anchor，是原始图片上的目标大小，其间P表明特征图的层级，P3/8该层特征图缩放为1/8,是第3层特征
  - [10,13, 16,30, 33,23]  # P3/8 下采样1/8后的anchor大小,检测小目标,10,13是一组尺寸，总共三组检测小目标
  - [30,61, 62,45, 59,119]  # P4/16 下采样1/16后的anchor大小,检测中目标，共三组
  - [116,90, 156,198, 373,326]  # P5/32 下采样1/32后的anchor大小,检测大目标，共三组

# ================================
# YOLOv5 v6.0 backbone
# 3、backbone部分
backbone:
  # from = -1,表示输入来自上一层；from=[-1,6], 输入来自上一层和第6层
  # number 表示当前模块的复用个数，实际复用个数由number和参数depth_multiple共同决定，决定当前模块的深度
  # module 表示该层模块的名称，这些模块写在common.py中，模块化的搭建网络
  # args 类的初始化参数，解析作为 module 的传入参数

  # example:
  # yolov5s 中 depth_multiple设置为了0.33, width_multiple设置为了0.5
  # 第零层 [-1, 1, Conv, [64, 6, 2, 2]]
  # 解析为：
  # from = -1,表示输入来自上一层
  # number = 1, number * depth_multiple =1 * 0.33 = 0.33, 取1
  # module = "Conv", 是一个卷积模块
  # args = [64, 6, 2, 2] -> [3,64*0.5=32,6,2,2]，3为输入channel，32为输出channel

  # [from, number, module, args]                                                原始输入图片： 640x640@3
  [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2   [3, 64*0.5=32, 6, 2, 2]            output = 320x320@32
   [-1, 1, Conv, [128, 3, 2]],    # 1-P2/4   [32, 128*0.5=64, 3, 2]             output = 160x160@64
   [-1, 3, C3, [128]],            # 2        [128*0.5=64, 64, 1]
   [-1, 1, Conv, [256, 3, 2]],    # 3-P3/8   [64, 256*0.5=128, 3, 2]            output = 80x80@128
   [-1, 6, C3, [256]],            # 4        [256*0.5=128, 128, 2] ------>接口
   [-1, 1, Conv, [512, 3, 2]],    # 5-P4/16  [128, 512*0.5=256, 3, 2]           output = 40x40@256
   [-1, 9, C3, [512]],            # 6        [512*0.5=256, 256, 3] ------>接口
   [-1, 1, Conv, [1024, 3, 2]],   # 7-P5/32  [256, 1024*0.5=512, 3, 2]          output = 20x20@512
   [-1, 3, C3, [1024]],           # 8        [1024*0.5=512, 512, 1]
   [-1, 1, SPPF, [1024, 5]],      # 9        [1024*0.5=512, 512, 5] ------>接口
  ]

# YOLOv5 v6.0 head
# 4、head部分
head:
  # neck
  # 前两个阶段是向上concat
  [[-1, 1, Conv, [512, 1, 1]],                      # 10                [512, 256, 1, 1]                output = 20x20@256
   # nn.upsample不改变channel但是会把feature map宽和高都变为2倍
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],      # 11                [None, 2, 'nearest']            output = 40x40@256
    # 与上面backbone中的 P4阶段的最后一个输出做一个concat
    # 进行concat的两层必须大小相同、通道数相同 concat之后通道翻倍
   [[-1, 6], 1, Concat, [1]],                       # 12                [1] cat backbone P4             output = 40x40@512
   [-1, 3, C3, [512, False]],                       # 13                [512, 256, 1, False]            output = 40x40@256

   [-1, 1, Conv, [256, 1, 1]],                      # 14                [256, 128, 1, 1]                output = 40x40@128
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],      # 15                [None, 2, 'nearest']            output = 80x80@128
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3    # 16                [1]  cat backbone P3            output = 80x80@256
   [-1, 3, C3, [256, False]],  # 17 (P3/8-small)    # 17(P3/8-small)    [256, 128, 1, False]            output = 80x80@128

   # 后两个阶段是向下concat
   [-1, 1, Conv, [256, 3, 2]],                      # 18                [128, 128, 3, 2]                output = 40x40@128
   [[-1, 14], 1, Concat, [1]],                      # 19                [1] cat head P4                 output = 40x40@256
   [-1, 3, C3, [512, False]],                       # 20(P4/16-medium)  [256, 256, 1, False]

   [-1, 1, Conv, [512, 3, 2]],                      # 21                [256, 256, 3, 2]                output = 20x20@256
   [[-1, 10], 1, Concat, [1]],                      # 22                cat head P5                     output = 20x20@512
   [-1, 3, C3, [1024, False]],                      # 23(P5/32-large)   [512, 512, 1, False]

   # head
   [[17, 20, 23], 1, Detect, [nc, anchors]],        # 24 Detect(P3, P4, P5)  [17,20,23]都传入作为Detect的输入
  ]                                                 # [k,k,3,conf+loc+cla]
